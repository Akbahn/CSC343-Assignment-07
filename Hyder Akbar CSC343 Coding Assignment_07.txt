#include <pthread.h>
#include <stdio.h>
#include <unistd.h>

#define MAX_EAT_CYCLES 5

pthread_mutex_t fork_0;
pthread_mutex_t fork_1;

// Philosopher function
void* philosopher(void* arg) {
    int id = *(int*)arg;
    int eat_count = 0;

    while (eat_count < MAX_EAT_CYCLES) {
        // Thinking
        printf("Philosopher %d is thinking...\n", id);
        sleep(1);

        pthread_mutex_lock(&fork_0); 
        pthread_mutex_lock(&fork_1); 

        // Eating
        printf("Philosopher %d is eating...\n", id);
        sleep(2);
        eat_count++;

        // Release forks
        pthread_mutex_unlock(&fork_1);
        pthread_mutex_unlock(&fork_0);

        // Delay to make output clearer
        sleep(1);
    }

    printf("Philosopher %d finished eating %d times and is done.\n", id, eat_count);
    return NULL;
}

int main() {
    pthread_t phil[2];
    int ids[2] = {0, 1};

    // Initialize mutexes
    pthread_mutex_init(&fork_0, NULL);
    pthread_mutex_init(&fork_1, NULL);

    // Create philosopher threads
    pthread_create(&phil[0], NULL, philosopher, &ids[0]);
    pthread_create(&phil[1], NULL, philosopher, &ids[1]);

    // Wait for philosophers to finish
    pthread_join(phil[0], NULL);
    pthread_join(phil[1], NULL);

    // Destroy mutexes
    pthread_mutex_destroy(&fork_0);
    pthread_mutex_destroy(&fork_1);

    printf("All philosophers have finished.\n");
    return 0;
}
